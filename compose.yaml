services:
  rosmaster:
    image: ros:noetic-ros-core
    command: roscore
    restart: unless-stopped
  scanner:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - rosmaster
    command: roslaunch --wait rplidar_ros rplidar_a2m12.launch
    profiles: [mapping, matchplay]
    environment:
      ROS_HOSTNAME: scanner
      ROS_MASTER_URI: "http://rosmaster:11311"
    devices:
      - /dev/ttyUSB0 # dont forget to make sure this has proper permissions
    restart: unless-stopped
  slam:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - rosmaster
      - bag_player
      - filter
    command: roslaunch --wait slam_toolbox lifelong.launch
    profiles: [slamp]
    environment:
      ROS_HOSTNAME: slam
      ROS_MASTER_URI: "http://rosmaster:11311"
    volumes:
      - map:/map
    restart: unless-stopped
  filter:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - rosmaster
    command: roslaunch --wait laser_filter t_laser_filter.launch
    profiles: [local-tool, local-amcl, slamp]
    environment:
      ROS_HOSTNAME: filter
      ROS_MASTER_URI: "http://rosmaster:11311"
    restart: unless-stopped
  localization-tool:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - rosmaster
      - filter
    command: roslaunch --wait slam_toolbox localization.launch
    profiles: [local-tool]
    environment:
      ROS_HOSTNAME: localization-tool
      ROS_MASTER_URI: "http://rosmaster:11311"
    volumes:
      - map:/map
  localization-amcl:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - rosmaster
      - filter  
      #- map-loader
    command: roslaunch --wait amcl amcl_diff.launch
    profiles: [local-amcl]
    environment:
      ROS_HOSTNAME: localization-amcl
      ROS_MASTER_URI: "http://rosmaster:11311"
    volumes:
    - map:/map
  map-loader:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - rosmaster
      - filter  
    command: rosrun map_server map_server /map/map.yaml
    profiles: [not-working-:(]
    environment:
      ROS_HOSTNAME: map-loader
      ROS_MASTER_URI: "http://rosmaster:11311"
    volumes:
      - map:/map
    restart: unless-stopped
  nt_bridge:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - rosmaster
      - sim
    command: roslaunch --wait frc_basics ros_bridge.launch hostname:=nt.server
    profiles: [mapping, matchplay, sim]
    environment:
      ROS_HOSTNAME: nt_bridge
      ROS_MASTER_URI: "http://rosmaster:11311"
    extra_hosts:
      - "nt.server:${NT_SERVER:-host-gateway}"
    restart: unless-stopped
  bagger:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - rosmaster
    command: roslaunch --wait bag_manager auto_bagger.launch
    profiles: [mapping, matchplay]
    environment:
      ROS_HOSTNAME: bagger
      ROS_MASTER_URI: "http://rosmaster:11311"
    volumes:
      - bags:/bags
    restart: unless-stopped
  bag_player:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - rosmaster
    command: roslaunch --wait bag_manager play_with_tf.launch bag_file_str:="${BAG_FILE_STR}"
    profiles: [playback]
    environment:
      ROS_HOSTNAME: bag_player
      ROS_MASTER_URI: "http://rosmaster:11311"
    volumes:
      - bags:/bags
  rviz:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - rosmaster
      - bag_player
    command: rosrun rviz rviz -d /ros_ws/src/bag_manager/view_bag.rviz
    profiles: [visualization]
    environment:
      ROS_HOSTNAME: rviz
      ROS_MASTER_URI: "http://rosmaster:11311"
      DISPLAY: ${DISPLAY}
      LIBGL_ALWAYS_SOFTWARE: 1
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - map:/map #for testing beacuse amcl crashing
  sim:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - rosmaster
    command: roslaunch --wait frc_sim_gazebo frc_sim.launch
    profiles: [sim]
    environment:
      ROS_HOSTNAME: sim
      ROS_MASTER_URI: "http://rosmaster:11311"
      DISPLAY: ${DISPLAY}
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
  photonvision:
    build:
      context: photonvision
      dockerfile: Dockerfile
    profiles: [photonvision]
    extra_hosts:
      - "nt.server:${NT_SERVER:-host-gateway}"
    ports:
      - 5800:5800
      - 1181-1190
    devices:
      - ${CAMERA_0:-/dev/null}
      - ${CAMERA_1:-/dev/null}
    volumes:
      - photonvision_config:/opt/photonvision/photonvision_config
    restart: unless-stopped
  portainer:  # Web UI managing containers
    image: portainer/portainer-ce:2.20.3
    ports:
      - 5801:9443
    volumes:
      - data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
volumes:
  data:
  bags:
  photonvision_config:
  map: